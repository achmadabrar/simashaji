// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../apps/api/node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Admin table
model Admin {
  id       Int      @id @default(autoincrement())
  name     String
  email    String   @unique
  phone    String?
  password String
  asramas  Asrama[]

  @@map("Admin")
}

// User table (untuk pengguna aplikasi)
model User {
  id              String         @id @default(uuid())
  email           String         @unique
  name            String
  phone           String?
  birthDate       DateTime?      @map("birth_date")
  address         String?
  profileImage    String?        @map("profile_image")
  membershipType  MembershipType @default(REGULAR) @map("membership_type")
  points          Int            @default(0)
  rating          Float          @default(0.0)
  totalBookings   Int            @default(0) @map("total_bookings")
  joinedAt        DateTime       @default(now()) @map("joined_at")
  lastActive      DateTime       @default(now()) @map("last_active")
  
  // Auth related
  password        String?
  googleId        String?        @unique @map("google_id")
  isEmailVerified Boolean        @default(false) @map("is_email_verified")
  
  // User preferences
  notifications   UserNotification?
  paymentMethods  PaymentMethod[]
  
  // Relations
  bookings        Booking[]
  favorites       UserFavorite[]
  reviews         Review[]

  @@map("User")
}

// Asrama table (dormitory/property)
model Asrama {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  address   String
  city      String
  province  String
  contactNo String  @map("contact_no")
  lat       Float
  lng       Float
  adminId   Int     @map("admin_id")
  
  // Additional fields
  description String? @db.Text
  images      Json?   // Array of image URLs
  rating      Float   @default(0.0)
  totalReviews Int    @default(0) @map("total_reviews")
  isActive    Boolean @default(true) @map("is_active")
  
  // Relations
  admin       Admin   @relation(fields: [adminId], references: [id], onDelete: Restrict)
  spaces      Space[]

  @@map("Asrama")
}

// Space table (rooms, meeting rooms, halls)
model Space {
  id           Int       @id @default(autoincrement())
  name         String
  type         SpaceType
  capacity     Int
  pricePerDay  Decimal   @db.Decimal(10, 2) @map("price_per_day")
  images       Json      // Array of image URLs
  amenities    Json      // Array of amenities
  asramaId     Int       @map("asrama_id")
  
  // Additional fields
  description  String?   @db.Text
  size         Float?    // in square meters
  rating       Float     @default(0.0)
  totalReviews Int       @default(0) @map("total_reviews")
  isActive     Boolean   @default(true) @map("is_active")
  
  // Relations
  asrama       Asrama        @relation(fields: [asramaId], references: [id], onDelete: Restrict)
  bookings     Booking[]
  favorites    UserFavorite[]
  reviews      Review[]

  @@map("Space")
}

// Booking table
model Booking {
  id          String        @id @default(uuid())
  spaceId     Int           @map("space_id")
  userId      String        @map("user_id")
  checkIn     DateTime      @map("check_in")
  checkOut    DateTime      @map("check_out")
  totalDays   Int           @map("total_days")
  totalPrice  Decimal       @db.Decimal(10, 2) @map("total_price")
  status      BookingStatus @default(PENDING)
  
  // Payment related
  snapToken   String?       @map("snap_token")
  paymentMethodId String?   @map("payment_method_id")
  paidAt      DateTime?     @map("paid_at")
  
  // Additional fields
  guestCount  Int           @default(1) @map("guest_count")
  specialRequests String?   @db.Text @map("special_requests")
  notes       String?       @db.Text
  
  // Timestamps
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  
  // Relations
  space       Space         @relation(fields: [spaceId], references: [id], onDelete: Restrict)
  user        User          @relation(fields: [userId], references: [id], onDelete: Restrict)
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  review      Review?

  @@map("Booking")
}

// User favorites
model UserFavorite {
  id      String @id @default(uuid())
  userId  String @map("user_id")
  spaceId Int    @map("space_id")
  addedAt DateTime @default(now()) @map("added_at")
  
  // Relations
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId])
  @@map("UserFavorite")
}

// Payment methods
model PaymentMethod {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  type        PaymentType
  cardNumber  String      @map("card_number") // Encrypted/masked
  cardHolder  String      @map("card_holder")
  expiryMonth Int         @map("expiry_month")
  expiryYear  Int         @map("expiry_year")
  isDefault   Boolean     @default(false) @map("is_default")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings    Booking[]

  @@map("PaymentMethod")
}

// User notification preferences
model UserNotification {
  id                    String  @id @default(uuid())
  userId                String  @unique @map("user_id")
  bookingReminders      Boolean @default(true) @map("booking_reminders")
  promotionalOffers     Boolean @default(true) @map("promotional_offers")
  newsletter            Boolean @default(false)
  upcomingBookings      Boolean @default(true) @map("upcoming_bookings")
  emailNotifications    Boolean @default(true) @map("email_notifications")
  pushNotifications     Boolean @default(true) @map("push_notifications")
  
  // Relations
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserNotification")
}

// Reviews and ratings
model Review {
  id          String   @id @default(uuid())
  bookingId   String   @unique @map("booking_id")
  userId      String   @map("user_id")
  spaceId     Int      @map("space_id")
  rating      Float    // 1-5 stars
  comment     String?  @db.Text
  cleanliness Float?   // Individual rating aspects
  location    Float?
  amenities   Float?
  service     Float?
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  space       Space    @relation(fields: [spaceId], references: [id], onDelete: Restrict)

  @@map("Review")
}

// Notification system
model Notification {
  id        String           @id @default(uuid())
  userId    String           @map("user_id")
  title     String
  message   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false) @map("is_read")
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now()) @map("created_at")
  
  @@map("Notification")
}

// Enums
enum SpaceType {
  KAMAR
  RUANG_RAPAT
  AULA

  @@map("SpaceType")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  PAID
  CANCELLED
  COMPLETED

  @@map("BookingStatus")
}

enum MembershipType {
  REGULAR
  PREMIUM
  VIP

  @@map("MembershipType")
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  VISA
  MASTERCARD
  BANK_TRANSFER

  @@map("PaymentType")
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PROMOTIONAL
  SYSTEM_UPDATE
  REVIEW_REQUEST

  @@map("NotificationType")
}