// apps/api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../../apps/api/node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Admin table
model Admin {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(191)
  email      String   @unique @db.VarChar(191)
  phone      String?  @db.VarChar(191)
  password   String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  asramas Asrama[]

  @@map("Admin")
}

// User table (untuk pengguna aplikasi)
model User {
  id                String         @id @db.VarChar(191)
  email             String         @unique @db.VarChar(191)
  name              String         @db.VarChar(191)
  phone             String?        @db.VarChar(191)
  birth_date        DateTime?
  address           String?        @db.Text
  profile_image     String?        @db.VarChar(500)
  membership_type   MembershipType @default(REGULAR) @map("membership_type")
  points            Int            @default(0)
  rating            Float          @default(0.0)
  total_bookings    Int            @default(0)
  joined_at         DateTime       @default(now())
  last_active       DateTime       @default(now())
  password          String?        @db.VarChar(255)
  google_id         String?        @unique @db.VarChar(191)
  is_email_verified Boolean        @default(false)

  bookings           Booking[]
  payment_methods    PaymentMethod[]
  favorites          UserFavorite[]
  notifications      UserNotification?
  reviews            Review[]
  user_notifications Notification[]
  //pricing   SpacePricing[]

  @@map("User")
}

// Asrama table (dormitory/property)
model Asrama {
  id            Int      @id @default(autoincrement())
  name          String   @unique @db.VarChar(191)
  address       String   @db.VarChar(191)
  city          String   @db.VarChar(191)
  province      String   @db.VarChar(191)
  contact_no    String   @db.VarChar(191)
  lat           Float
  lng           Float
  admin_id      Int
  description   String?  @db.Text
  images        Json?
  rating        Float    @default(0.0)
  total_reviews Int      @default(0)
  is_active     Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  admin     Admin      @relation(fields: [admin_id], references: [id])
  spaces    Space[]
  buildings Building[]

  @@map("Asrama")
}

model Building {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(191) // contoh: Muzdalifah, Mina A, Mina B, Arafah
  asrama_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  asrama Asrama  @relation(fields: [asrama_id], references: [id])
  spaces Space[]
  floors Floor[]

  @@map("Building")
}

// Space Pricing
model SpacePricing {
  id           Int          @id @default(autoincrement())
  space        Space        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId      Int
  durationType DurationType
  category     Category     @default(GENERAL)
  price        Decimal      @db.Decimal(10, 2)
}

// Space table (rooms, meeting rooms, halls)
model Space {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(191)
  type          SpaceType
  capacity      Int
  price_per_day Decimal   @db.Decimal(10, 2)
  images        Json
  amenities     Json
  asrama_id     Int
  building_id   Int?
  floorId       Int?
  floor         Floor?    @relation(fields: [floorId], references: [id])
  description   String?   @db.Text
  size          Float?
  rating        Float     @default(0.0)
  total_reviews Int       @default(0)
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  asrama    Asrama         @relation(fields: [asrama_id], references: [id])
  building  Building?      @relation(fields: [building_id], references: [id])
  bookings  Booking[]
  favorites UserFavorite[]
  reviews   Review[]
  pricing   SpacePricing[]

  @@map("Space")
}

model Floor {
  id         Int      @id @default(autoincrement())
  number     Int // lantai ke berapa
  name       String?  @db.VarChar(191)
  buildingId Int
  building   Building @relation(fields: [buildingId], references: [id])

  spaces Space[]

  @@unique([buildingId, number])
}

model PaymentMethod {
  id           String      @id @db.VarChar(191)
  user_id      String      @db.VarChar(191)
  type         PaymentType
  card_number  String      @db.VarChar(191)
  card_holder  String      @db.VarChar(191)
  expiry_month Int
  expiry_year  Int
  is_default   Boolean     @default(false)
  is_active    Boolean     @default(true)
  created_at   DateTime    @default(now())

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("PaymentMethod")
}

model Booking {
  id                String        @id @db.VarChar(191)
  space_id          Int
  user_id           String        @db.VarChar(191)
  check_in          DateTime
  check_out         DateTime
  total_days        Int
  total_price       Decimal       @db.Decimal(10, 2)
  status            BookingStatus @default(PENDING)
  snap_token        String?       @db.VarChar(191)
  payment_method_id String?       @db.VarChar(191)
  paid_at           DateTime?
  guest_count       Int           @default(1)
  special_requests  String?       @db.Text
  notes             String?       @db.Text
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  space          Space          @relation(fields: [space_id], references: [id])
  user           User           @relation(fields: [user_id], references: [id])
  payment_method PaymentMethod? @relation(fields: [payment_method_id], references: [id], onDelete: SetNull)
  review         Review?

  @@map("Booking")
}

// User favorites
model UserFavorite {
  id       String   @id @db.VarChar(191)
  user_id  String   @db.VarChar(191)
  space_id Int
  added_at DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  space Space @relation(fields: [space_id], references: [id], onDelete: Cascade)

  @@unique([user_id, space_id])
  @@map("UserFavorite")
}

// User notification preferences
model UserNotification {
  id                  String  @id @db.VarChar(191)
  user_id             String  @unique @db.VarChar(191)
  booking_reminders   Boolean @default(true)
  promotional_offers  Boolean @default(true)
  newsletter          Boolean @default(false)
  upcoming_bookings   Boolean @default(true)
  email_notifications Boolean @default(true)
  push_notifications  Boolean @default(true)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("UserNotification")
}

// Reviews and ratings
model Review {
  id          String   @id @db.VarChar(191)
  booking_id  String   @unique @db.VarChar(191)
  user_id     String   @db.VarChar(191)
  space_id    Int
  rating      Float
  comment     String?  @db.Text
  cleanliness Float?
  location    Float?
  amenities   Float?
  service     Float?
  created_at  DateTime @default(now())

  booking Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id])
  space   Space   @relation(fields: [space_id], references: [id])

  @@map("Review")
}

// Notification system
model Notification {
  id         String           @id @db.VarChar(191)
  user_id    String           @db.VarChar(191)
  title      String           @db.VarChar(191)
  message    String           @db.Text
  type       NotificationType
  is_read    Boolean          @default(false)
  data       Json?
  created_at DateTime         @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([created_at])
  @@map("Notification")
}

// Enums
enum SpaceType {
  KAMAR
  RUANG_RAPAT
  AULA
  MANASIK

  @@map("SpaceType")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  PAID
  CANCELLED
  COMPLETED

  @@map("BookingStatus")
}

enum MembershipType {
  REGULAR
  PREMIUM
  VIP
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  VISA
  MASTERCARD
  BANK_TRANSFER

  @@map("PaymentType")
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PROMOTIONAL
  SYSTEM_UPDATE
  REVIEW_REQUEST

  @@map("NotificationType")
}

enum DurationType {
  PER_DAY
  PER_8H
  PER_12H
  PER_PERSON
}

enum Category {
  DEWASA
  ANAK
  GENERAL
}
